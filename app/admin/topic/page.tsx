"use client"

import { useEffect, useRef, useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Plus, Search, Edit, Trash2, Download, Calendar, User, FileText, Building, Eye } from "lucide-react"
import { Dialog, DialogClose, DialogContent, DialogFooter, DialogTitle, DialogTrigger, } from "@/components/ui/dialog"
import { DialogHeader } from "@/components/ui/dialog"
import { Textarea } from "@/components/ui/textarea"
import { usePathname } from "next/navigation"

export default function AdminDocumentsPage() {
  const [searchTerm, setSearchTerm] = useState("")
  const [selectedType, setSelectedType] = useState("all")
  const [selectedUnit, setSelectedUnit] = useState("all")


  const documentTypes = [
    // { id: "all", name: "T·∫•t c·∫£ lo·∫°i" },
    // { id: "regulation", name: "Li√™n h·ªá g√≥p √Ω" },
    { id: "report", name: "CCHC & Chuy·ªÉn ƒë·ªïi s·ªë" },
    { id: "directive", name: "Th√¥ng tin tuy√™n truy·ªÅn" },
    { id: "notice", name: "Th√¥ng tin Ph√°p lu·∫≠t" },
    { id: "plan", name: "Th√¥ng tin KHQS" },
  ]



  const documents = [
    {
      id: 1,
      title: "Ch·ªâ th·ªã s·ªë 01/CT-F375 v·ªÅ c√¥ng t√°c chu·∫©n b·ªã nƒÉm 2025",
      type: "directive",
      typeName: "Ch·ªâ th·ªã",
      unit: "command",
      unitName: "Ch·ªâ huy s∆∞ ƒëo√†n",
      author: "ƒê·∫°i t√° Nguy·ªÖn VƒÉn A",
      date: "15/12/2024",
      downloads: 45,
      size: "2.3 MB",
      status: "published",
    },
    {
      id: 2,
      title: "Th√¥ng b√°o v·ªÅ vi·ªác t·ªï ch·ª©c h·ªôi ngh·ªã t·ªïng k·∫øt",
      type: "notice",
      typeName: "Th√¥ng b√°o",
      unit: "political",
      unitName: "Ph√≤ng ch√≠nh tr·ªã",
      author: "Trung t√° Tr·∫ßn VƒÉn B",
      date: "12/12/2024",
      downloads: 32,
      size: "1.8 MB",
      status: "published",
    },
    {
      id: 3,
      title: "K·∫ø ho·∫°ch hu·∫•n luy·ªán qu√Ω I/2025",
      type: "plan",
      typeName: "K·∫ø ho·∫°ch",
      unit: "staff",
      unitName: "Ph√≤ng tham m∆∞u",
      author: "Thi·∫øu t√° L√™ VƒÉn C",
      date: "10/12/2024",
      downloads: 67,
      size: "4.1 MB",
      status: "draft",
    },
    {
      id: 4,
      title: "Quy ƒë·ªãnh v·ªÅ qu·∫£n l√Ω t√†i s·∫£n k·ªπ thu·∫≠t",
      type: "regulation",
      typeName: "Quy ƒë·ªãnh",
      unit: "logistics",
      unitName: "Ph√≤ng HC-KT",
      author: "ƒê·∫°i √∫y Ph·∫°m VƒÉn D",
      date: "08/12/2024",
      downloads: 28,
      size: "3.2 MB",
      status: "pending",
    },
    {
      id: 5,
      title: "B√°o c√°o t√¨nh h√¨nh th·ª±c hi·ªán nhi·ªám v·ª• th√°ng 12",
      type: "report",
      typeName: "B√°o c√°o",
      unit: "staff",
      unitName: "Ph√≤ng tham m∆∞u",
      author: "Trung t√° Ho√†ng VƒÉn E",
      date: "05/12/2024",
      downloads: 19,
      size: "2.7 MB",
      status: "published",
    },
  ]

  const filteredDocuments = documents.filter((doc) => {
    const matchesSearch = doc.title.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesType = selectedType === "all" || doc.type === selectedType
    const matchesUnit = selectedUnit === "all" || doc.unit === selectedUnit
    return matchesSearch && matchesType && matchesUnit
  })

  const stats = [
    { label: "CCHC & Chuy·ªÉn ƒë·ªïi s·ªë", value: "89", color: "text-blue-600" },
    { label: "Th√¥ng tin tuy√™n truy·ªÅn", value: "76", color: "text-green-600" },
    { label: "Th√¥ng tin Ph√°p lu·∫≠t", value: "8", color: "text-yellow-600" },
    { label: "TTh√¥ng tin KHQS", value: "5", color: "text-red-600" },
  ]
  const handleDelete = () => {
    const confirmDelete = window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën xo√°?");

    if (confirmDelete) {
      // üëâ Logic xo√° ·ªü ƒë√¢y ‚Äî v√≠ d·ª• API, x√≥a item, v.v.
      console.log("ƒê√£ xo√° b√†i vi·∫øt");

      // üëâ Th√¥ng b√°o
      if (Notification.permission === "granted") {
        new Notification("ƒê√£ xo√° b√†i vi·∫øt", {
          body: "B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c xo√° th√†nh c√¥ng.",
        });
      } else if (Notification.permission !== "denied") {
        // Y√™u c·∫ßu quy·ªÅn n·∫øu ch∆∞a ƒë∆∞·ª£c c·∫•p
        Notification.requestPermission().then((permission) => {
          if (permission === "granted") {
            new Notification("ƒê√£ xo√° b√†i vi·∫øt", {
              body: "B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c xo√° th√†nh c√¥ng.",
            });
          } else {
            alert("ƒê√£ xo√° b√†i vi·∫øt.");
          }
        });
      } else {
        alert("ƒê√£ xo√° b√†i vi·∫øt.");
      }
    }
  };

  const [selectedFile, setSelectedFile] = useState<File | null>(null);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      if (file.size > 50 * 1024 * 1024) {
        alert("K√≠ch th∆∞·ªõc file kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 50MB");
        return;
      }
      setSelectedFile(file);
    }
    if (file && file.type.startsWith("image/")) {
      setSelectedFile(file);
      setPreviewUrl(URL.createObjectURL(file));
    }
  };

  const handleRemoveFile = () => {
    setSelectedFile(null);
  };
  const [selectedDocType, setSelectedDocType] = useState("all");
  const reportSectionRef = useRef<HTMLDivElement>(null)
  const [previewUrl, setPreviewUrl] = useState<string | null>(null);
  const pathname = usePathname()
  const [dialogOpen, setDialogOpen] = useState(false)
  useEffect(() => {
    // N·∫øu ƒëang ·ªü trang gi·ªõi thi·ªáu th√¨ t·ª± ch·ªçn "report" v√† m·ªü dialog
    if (pathname === "/admin/topic") {
      setSelectedDocType("report")
      // setDialogOpen(true)
    }
  }, [pathname])
  const [inputValue, setInputValue] = useState("")
  const [fields, setFields] = useState<string[]>([])

  const handleAddField = () => {
    const trimmed = inputValue.trim()
    if (trimmed && !fields.includes(trimmed)) {
      setFields([...fields, trimmed])
    }
    setInputValue("") // Reset √¥ input
  }

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-3xl font-bold text-gray-800">Qu·∫£n l√Ω chuy√™n ƒë·ªÅ</h1>

      </div>

      {/* Statistics */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        {stats.map((stat, index) => (
          <Card key={index}>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">{stat.label}</p>
                  <p className={`text-3xl font-bold ${stat.color}`}>{stat.value}</p>
                </div>
                <FileText className={`h-8 w-8 ${stat.color}`} />
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Filters */}
      <Card>
        <CardContent className="p-6">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
              <Input
                placeholder="T√¨m ki·∫øm vƒÉn b·∫£n..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full"
              />
            </div>
            <div>
              <Select onValueChange={setSelectedDocType} defaultValue="report" >
                <SelectTrigger>
                  <SelectValue placeholder="Ch·ªçn m·ª•c" />
                </SelectTrigger>
                <SelectContent>
                  {documentTypes.map((type) => (
                    <SelectItem key={type.id} value={type.id}>
                      {type.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>

            </div>

            <div>
              <Button variant="outline" className="w-full">
                <Search className="h-4 w-4 mr-2" />
                T√¨m ki·∫øm
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Documents Table */}
      <Card>
        <CardHeader>
          <div className="flex justify-between items-center w-full">
            <div className="flex gap-4">
              <CardTitle>Danh s√°ch qu·∫£n l√Ω </CardTitle>
            </div>
            <div className="text-right" >
              {selectedDocType === "report" && (
                <Dialog >
                  <DialogTrigger asChild>
                    <Button
                      className="bg-white text-green-600 hover:bg-gray-100 shadow-lg"
                    >
                      <Plus className="h-4 w-4 mr-2" />
                      Th√™m CCHC & Chuy·ªÉn ƒë·ªïi s·ªë
                    </Button>
                  </DialogTrigger>

                  <DialogContent className="max-w-2xl max-h-screen overflow-y-auto">

                    <DialogHeader >
                      <DialogTitle>CCHC & Chuy·ªÉn ƒë·ªïi s·ªë</DialogTitle>
                    </DialogHeader>
                    <div className="space-y-4">
                      <div>
                        <label>Ti√™u ƒë·ªÅ *</label>
                        <Input placeholder="Nh·∫≠p ti√™u ƒë·ªÅ " />
                      </div>

                      <div>
                        <label>M√¥ t·∫£ *</label>
                        <Textarea
                          id="description"
                          placeholder="Nh·∫≠p m√¥ t·∫£ "
                          rows={10}
                        />
                      </div>
                      <div>
                        <label>Lo·∫°i b√†i vi·∫øt</label>
                        <Select>
                          <SelectTrigger>
                            <SelectValue placeholder="Ch·ªçn lo·∫°i b√†i vi·∫øt" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="chuyen-doi-so">Chuy·ªÉn ƒë·ªïi s·ªë</SelectItem>
                            <SelectItem value="cai-cach-hanh-chinh">C·∫£i c√°ch h√†nh ch√≠nh</SelectItem>
                            <SelectItem value="chinh-phu-dien-tu">Ch√≠nh ph·ªß ƒëi·ªán t·ª≠</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div>
                        <label>Thu·ªôc lƒ©nh v·ª±c</label>
                        <div className="flex items-center gap-2 mt-1">
                          <Input
                            className="w-60"
                            placeholder="Nh·∫≠p"
                            value={inputValue}
                            onChange={(e) => setInputValue(e.target.value)}
                            onKeyDown={(e) => e.key === "Enter" && handleAddField()}
                          />
                          <Button type="button" onClick={handleAddField}>
                            Nh·∫≠p
                          </Button>
                        </div>

                        {/* Hi·ªÉn th·ªã c√°c lƒ©nh v·ª±c ƒë√£ nh·∫≠p */}
                        {fields.length > 0 && (
                          <div className="flex flex-wrap gap-2 mt-3">
                            {fields.map((field, index) => (
                              <div
                                key={index}
                                className="flex items-center bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm"
                              >
                                <span>{field}</span>
                                <button
                                  onClick={() => {
                                    const updated = fields.filter((_, i) => i !== index)
                                    setFields(updated)
                                  }}
                                  className="ml-2 text-red-500 hover:text-red-700"
                                  aria-label={`Xo√° ${field}`}
                                >
                                  ‚úï
                                </button>
                              </div>
                            ))}
                          </div>
                        )}

                      </div>
                      <div>
                        <label>T√™n v√† c·∫•p b·∫≠c</label>
                        <Input placeholder="Nh·∫≠p t√™n v√† c·∫•p b·∫≠c " />
                      </div>

                      <DialogFooter >
                        <DialogClose asChild>

                          <Button type="button"  >
                            H·ªßy
                          </Button>
                        </DialogClose>
                        <DialogClose asChild>

                          <Button type="submit" className="bg-blue-600 hover:bg-blue-700">
                            L∆∞u
                          </Button>
                        </DialogClose>
                      </DialogFooter>


                    </div>
                  </DialogContent>

                </Dialog>
              )}
              {selectedDocType === "directive" && (
                <Dialog >
                  <DialogTrigger asChild>
                    <Button
                      className="bg-white text-green-600 hover:bg-gray-100 shadow-lg"
                    >
                      <Plus className="h-4 w-4 mr-2" />
                      Th√™m Th√¥ng tin tuy√™n truy·ªÅn
                    </Button>
                  </DialogTrigger>

                  <DialogContent className="max-w-2xl max-h-screen overflow-y-auto">

                    <DialogHeader >
                      <DialogTitle>Th√¥ng tin tuy√™n truy·ªÅn</DialogTitle>
                    </DialogHeader>
                    <div className="space-y-4">
                      <div>
                        <label>Ti√™u ƒë·ªÅ *</label>
                        <Input placeholder="Nh·∫≠p ti√™u ƒë·ªÅ " />
                      </div>

                      <div>
                        <label>M√¥ t·∫£ *</label>
                        <Textarea
                          id="description"
                          placeholder="Nh·∫≠p m√¥ t·∫£ "
                          rows={10}
                        />
                      </div>
                      <div>
                        <label>Lo·∫°i b√†i vi·∫øt</label>
                        <Select>
                          <SelectTrigger>
                            <SelectValue placeholder="Ch·ªçn lo·∫°i b√†i vi·∫øt" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="giao-duc-chinh-tri">Gi√°o d·ª•c ch√≠nh tr·ªã</SelectItem>
                            <SelectItem value="truyen-thong">Truy·ªÅn Th√¥ng</SelectItem>
                            <SelectItem value="van-hoa">VƒÉn h√≥a</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div>
                        <label>Thu·ªôc lƒ©nh v·ª±c</label>
                        <div className="flex items-center gap-2 mt-1">
                          <Input
                            className="w-60"
                            placeholder="Nh·∫≠p"
                            value={inputValue}
                            onChange={(e) => setInputValue(e.target.value)}
                            onKeyDown={(e) => e.key === "Enter" && handleAddField()}
                          />
                          <Button type="button" onClick={handleAddField}>
                            Nh·∫≠p
                          </Button>
                        </div>

                        {/* Hi·ªÉn th·ªã c√°c lƒ©nh v·ª±c ƒë√£ nh·∫≠p */}
                        {fields.length > 0 && (
                          <div className="flex flex-wrap gap-2 mt-3">
                            {fields.map((field, index) => (
                              <div
                                key={index}
                                className="flex items-center bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm"
                              >
                                <span>{field}</span>
                                <button
                                  onClick={() => {
                                    const updated = fields.filter((_, i) => i !== index)
                                    setFields(updated)
                                  }}
                                  className="ml-2 text-red-500 hover:text-red-700"
                                  aria-label={`Xo√° ${field}`}
                                >
                                  ‚úï
                                </button>
                              </div>
                            ))}
                          </div>
                        )}

                      </div>
                      <div>
                        <label>T√™n v√† c·∫•p b·∫≠c</label>
                        <Input placeholder="Nh·∫≠p t√™n v√† c·∫•p b·∫≠c " />
                      </div>

                      <DialogFooter >
                        <DialogClose asChild>

                          <Button type="button"  >
                            H·ªßy
                          </Button>
                        </DialogClose>
                        <DialogClose asChild>

                          <Button type="submit" className="bg-blue-600 hover:bg-blue-700">
                            L∆∞u
                          </Button>
                        </DialogClose>
                      </DialogFooter>


                    </div>
                  </DialogContent>

                </Dialog>
              )}
              {selectedDocType === "notice" && (
                <Dialog >
                  <DialogTrigger asChild>
                    <Button
                      className="bg-white text-green-600 hover:bg-gray-100 shadow-lg"
                    >
                      <Plus className="h-4 w-4 mr-2" />
                      Th√™m Th√¥ng tin Ph√°p lu·∫≠t
                    </Button>
                  </DialogTrigger>

                  <DialogContent className="max-w-2xl max-h-screen overflow-y-auto">

                    <DialogHeader >
                      <DialogTitle>Th√¥ng tin Ph√°p lu·∫≠t</DialogTitle>
                    </DialogHeader>
                    <div className="space-y-4">
                      <div>
                        <label>Ti√™u ƒë·ªÅ *</label>
                        <Input placeholder="Nh·∫≠p ti√™u ƒë·ªÅ " />
                      </div>

                      <div>
                        <label>M√¥ t·∫£ *</label>
                        <Textarea
                          id="description"
                          placeholder="Nh·∫≠p m√¥ t·∫£ "
                          rows={10}
                        />
                      </div>
                      <div>
                        <label>Lo·∫°i b√†i vi·∫øt</label>
                        <Select>
                          <SelectTrigger>
                            <SelectValue placeholder="Ch·ªçn lo·∫°i b√†i vi·∫øt" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="luat-quoc-phong">Lu·∫≠t Qu·ªëc ph√≤ng</SelectItem>
                            <SelectItem value="luat-quan-su">Lu·∫≠t Qu√¢n s·ª±</SelectItem>
                            <SelectItem value="quy-dinh">Quy ƒë·ªãnh</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div>
                        <label>Thu·ªôc lƒ©nh v·ª±c</label>
                        <div className="flex items-center gap-2 mt-1">
                          <Input
                            className="w-60"
                            placeholder="Nh·∫≠p"
                            value={inputValue}
                            onChange={(e) => setInputValue(e.target.value)}
                            onKeyDown={(e) => e.key === "Enter" && handleAddField()}
                          />
                          <Button type="button" onClick={handleAddField}>
                            Nh·∫≠p
                          </Button>
                        </div>

                        {/* Hi·ªÉn th·ªã c√°c lƒ©nh v·ª±c ƒë√£ nh·∫≠p */}
                        {fields.length > 0 && (
                          <div className="flex flex-wrap gap-2 mt-3">
                            {fields.map((field, index) => (
                              <div
                                key={index}
                                className="flex items-center bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm"
                              >
                                <span>{field}</span>
                                <button
                                  onClick={() => {
                                    const updated = fields.filter((_, i) => i !== index)
                                    setFields(updated)
                                  }}
                                  className="ml-2 text-red-500 hover:text-red-700"
                                  aria-label={`Xo√° ${field}`}
                                >
                                  ‚úï
                                </button>
                              </div>
                            ))}
                          </div>
                        )}

                      </div>
                      <div>
                        <label>T√™n v√† c·∫•p b·∫≠c</label>
                        <Input placeholder="Nh·∫≠p t√™n v√† c·∫•p b·∫≠c " />
                      </div>

                      <DialogFooter >
                        <DialogClose asChild>

                          <Button type="button"  >
                            H·ªßy
                          </Button>
                        </DialogClose>
                        <DialogClose asChild>

                          <Button type="submit" className="bg-blue-600 hover:bg-blue-700">
                            L∆∞u
                          </Button>
                        </DialogClose>
                      </DialogFooter>


                    </div>
                  </DialogContent>

                </Dialog>
              )}
              {selectedDocType === "plan" && (
                <Dialog >
                  <DialogTrigger asChild>
                    <Button
                      className="bg-white text-green-600 hover:bg-gray-100 shadow-lg"
                    >
                      <Plus className="h-4 w-4 mr-2" />
                      Th√™m Th√¥ng tin KHQS
                    </Button>
                  </DialogTrigger>

                  <DialogContent className="max-w-2xl max-h-screen overflow-y-auto">

                    <DialogHeader >
                      <DialogTitle>CCHC & Chuy·ªÉn ƒë·ªïi s·ªë</DialogTitle>
                    </DialogHeader>
                    <div className="space-y-4">
                      <div>
                        <label>Ti√™u ƒë·ªÅ *</label>
                        <Input placeholder="Nh·∫≠p ti√™u ƒë·ªÅ " />
                      </div>

                      <div>
                        <label>M√¥ t·∫£ *</label>
                        <Textarea
                          id="description"
                          placeholder="Nh·∫≠p m√¥ t·∫£ "
                          rows={10}
                        />
                      </div>
                      <div>
                        <label>Lo·∫°i b√†i vi·∫øt</label>
                        <Select>
                          <SelectTrigger>
                            <SelectValue placeholder="Ch·ªçn lo·∫°i b√†i vi·∫øt" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="cong-nghe-quan-su">C√¥ng ngh·ªá Qu√¢n s·ª±</SelectItem>
                            <SelectItem value="chien-luoc">Chi·∫øn l∆∞·ª£c</SelectItem>
                            <SelectItem value="nghien-cuu">Nghi√™n c·ª©u</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div>
                        <label>Thu·ªôc lƒ©nh v·ª±c</label>
                        <div className="flex items-center gap-2 mt-1">
                          <Input
                            className="w-60"
                            placeholder="Nh·∫≠p"
                            value={inputValue}
                            onChange={(e) => setInputValue(e.target.value)}
                            onKeyDown={(e) => e.key === "Enter" && handleAddField()}
                          />
                          <Button type="button" onClick={handleAddField}>
                            Nh·∫≠p
                          </Button>
                        </div>

                        {/* Hi·ªÉn th·ªã c√°c lƒ©nh v·ª±c ƒë√£ nh·∫≠p */}
                        {fields.length > 0 && (
                          <div className="flex flex-wrap gap-2 mt-3">
                            {fields.map((field, index) => (
                              <div
                                key={index}
                                className="flex items-center bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm"
                              >
                                <span>{field}</span>
                                <button
                                  onClick={() => {
                                    const updated = fields.filter((_, i) => i !== index)
                                    setFields(updated)
                                  }}
                                  className="ml-2 text-red-500 hover:text-red-700"
                                  aria-label={`Xo√° ${field}`}
                                >
                                  ‚úï
                                </button>
                              </div>
                            ))}
                          </div>
                        )}

                      </div>
                      <div>
                        <label>T√™n v√† c·∫•p b·∫≠c</label>
                        <Input placeholder="Nh·∫≠p t√™n v√† c·∫•p b·∫≠c " />
                      </div>

                      <DialogFooter >
                        <DialogClose asChild>

                          <Button type="button"  >
                            H·ªßy
                          </Button>
                        </DialogClose>
                        <DialogClose asChild>

                          <Button type="submit" className="bg-blue-600 hover:bg-blue-700">
                            L∆∞u
                          </Button>
                        </DialogClose>
                      </DialogFooter>


                    </div>
                  </DialogContent>

                </Dialog>
              )}


            </div>
          </div>

        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {filteredDocuments.map((doc) => (
              <div key={doc.id} className="flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50">
                <div className="flex items-start space-x-4">
                  <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                    <FileText className="h-6 w-6 text-blue-600" />
                  </div>
                  <div className="flex-1">
                    <h3 className="font-semibold text-gray-800 mb-2">{doc.title}</h3>
                    <div className="flex items-center space-x-4 text-sm text-gray-500">
                      <Badge variant="outline">{doc.typeName}</Badge>
                      <Badge
                        variant={
                          doc.status === "published" ? "default" : doc.status === "draft" ? "secondary" : "destructive"
                        }
                      >
                        {doc.status === "published" ? "ƒê√£ xu·∫•t b·∫£n" : doc.status === "draft" ? "B·∫£n nh√°p" : "Ch·ªù duy·ªát"}
                      </Badge>
                      <div className="flex items-center">
                        <Building className="h-4 w-4 mr-1" />
                        {doc.unitName}
                      </div>
                      <div className="flex items-center">
                        <User className="h-4 w-4 mr-1" />
                        {doc.author}
                      </div>
                      <div className="flex items-center">
                        <Calendar className="h-4 w-4 mr-1" />
                        {doc.date}
                      </div>
                      <span>Dung l∆∞·ª£ng: {doc.size}</span>
                      <span>L∆∞·ª£t t·∫£i: {doc.downloads}</span>
                    </div>
                  </div>
                </div>
                <div className="flex items-center space-x-2">
                  {/* <Button variant="outline" size="sm" >
                    <Eye className="h-4 w-4" />
                  </Button> */}
                  {selectedDocType === "report" && (
                    <Dialog >
                      <DialogTrigger asChild>
                        <Button variant="outline" size="sm" >
                          <Eye className="h-4 w-4" />
                        </Button>
                      </DialogTrigger>

                      <DialogContent className="max-w-2xl max-h-screen overflow-y-auto">

                        <DialogHeader >
                          <DialogTitle> Xem CCHC & Chuy·ªÉn ƒë·ªïi s·ªë</DialogTitle>
                        </DialogHeader>
                        <div className="space-y-4">
                          <div>
                            <label>Ti√™u ƒë·ªÅ *</label>
                            <Input placeholder="xem ti√™u ƒë·ªÅ " disabled />
                          </div>

                          <div>
                            <label>M√¥ t·∫£ *</label>
                            <Textarea
                              id="description"
                              placeholder="Xem m√¥ t·∫£ "
                              rows={10}
                              disabled />
                          </div>
                          <div>
                            <label>Lo·∫°i b√†i vi·∫øt</label>
                            <Select disabled>
                              <SelectTrigger>
                                <SelectValue placeholder="Ch·ªçn lo·∫°i b√†i vi·∫øt" />
                              </SelectTrigger>
                              <SelectContent>
                                <SelectItem value="chuyen-doi-so">Chuy·ªÉn ƒë·ªïi s·ªë</SelectItem>
                                <SelectItem value="cai-cach-hanh-chinh">C·∫£i c√°ch h√†nh ch√≠nh</SelectItem>
                                <SelectItem value="dchinh-phu-dien-tu">Ch√≠nh ph·ªß ƒëi·ªán t·ª≠</SelectItem>
                              </SelectContent>
                            </Select>
                          </div>
                          <div>
                            <label>Thu·ªôc lƒ©nh v·ª±c</label>
                            <div className="flex items-center gap-2 mt-1">
                              <Input
                                className="w-60"
                                placeholder="Xem"
                                value={inputValue}
                                onChange={(e) => setInputValue(e.target.value)}
                                onKeyDown={(e) => e.key === "Enter" && handleAddField()}
                                disabled />
                              <Button type="button" onClick={handleAddField} disabled>
                                Nh·∫≠p
                              </Button>
                            </div>

                            {/* Hi·ªÉn th·ªã c√°c lƒ©nh v·ª±c ƒë√£ nh·∫≠p */}
                            {fields.length > 0 && (
                              <div className="flex flex-wrap gap-2 mt-3">
                                {fields.map((field, index) => (
                                  <div
                                    key={index}
                                    className="flex items-center bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm"
                                  >
                                    <span>{field}</span>
                                    <button
                                      onClick={() => {
                                        const updated = fields.filter((_, i) => i !== index)
                                        setFields(updated)
                                      }}
                                      className="ml-2 text-red-500 hover:text-red-700"
                                      aria-label={`Xo√° ${field}`}
                                    >
                                      ‚úï
                                    </button>
                                  </div>
                                ))}
                              </div>
                            )}

                          </div>
                          <div>
                            <label>T√™n v√† c·∫•p b·∫≠c</label>
                            <Input placeholder="Xem t√™n v√† c·∫•p b·∫≠c " disabled />
                          </div>




                        </div>
                      </DialogContent>

                    </Dialog>
                  )}
                  {selectedDocType === "directive" && (
                    <Dialog >
                      <DialogTrigger asChild>
                        <Button variant="outline" size="sm" >
                          <Eye className="h-4 w-4" />
                        </Button>
                      </DialogTrigger>

                      <DialogContent className="max-w-2xl max-h-screen overflow-y-auto">

                        <DialogHeader >
                          <DialogTitle>Xem th√¥ng tin tuy√™n truy·ªÅn</DialogTitle>
                        </DialogHeader>
                        <div className="space-y-4">
                          <div>
                            <label>Ti√™u ƒë·ªÅ *</label>
                            <Input placeholder="xem ti√™u ƒë·ªÅ " disabled />
                          </div>

                          <div>
                            <label>M√¥ t·∫£ *</label>
                            <Textarea
                              id="description"
                              placeholder="Xem m√¥ t·∫£ "
                              rows={10}
                              disabled />
                          </div>
                          <div>
                            <label>Lo·∫°i b√†i vi·∫øt</label>
                            <Select disabled>
                              <SelectTrigger>
                                <SelectValue placeholder="Ch·ªçn lo·∫°i b√†i vi·∫øt" />
                              </SelectTrigger>
                              <SelectContent>
                                <SelectItem value="giao-duc-chinh-tri">Gi√°o d·ª•c ch√≠nh tr·ªã</SelectItem>
                                <SelectItem value="truyen-thong">Truy·ªÅn Th√¥ng</SelectItem>
                                <SelectItem value="van-hoa">VƒÉn h√≥a</SelectItem>
                              </SelectContent>
                            </Select>
                          </div>
                          <div>
                            <label>Thu·ªôc lƒ©nh v·ª±c</label>
                            <div className="flex items-center gap-2 mt-1">
                              <Input
                                className="w-60"
                                placeholder="Xem"
                                value={inputValue}
                                onChange={(e) => setInputValue(e.target.value)}
                                onKeyDown={(e) => e.key === "Enter" && handleAddField()}
                                disabled />
                              <Button type="button" onClick={handleAddField} disabled>
                                Nh·∫≠p
                              </Button>
                            </div>

                            {/* Hi·ªÉn th·ªã c√°c lƒ©nh v·ª±c ƒë√£ nh·∫≠p */}
                            {fields.length > 0 && (
                              <div className="flex flex-wrap gap-2 mt-3">
                                {fields.map((field, index) => (
                                  <div
                                    key={index}
                                    className="flex items-center bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm"
                                  >
                                    <span>{field}</span>
                                    <button
                                      onClick={() => {
                                        const updated = fields.filter((_, i) => i !== index)
                                        setFields(updated)
                                      }}
                                      className="ml-2 text-red-500 hover:text-red-700"
                                      aria-label={`Xo√° ${field}`}
                                    >
                                      ‚úï
                                    </button>
                                  </div>
                                ))}
                              </div>
                            )}

                          </div>
                          <div>
                            <label>T√™n v√† c·∫•p b·∫≠c</label>
                            <Input placeholder="Xem t√™n v√† c·∫•p b·∫≠c " disabled />
                          </div>




                        </div>
                      </DialogContent>

                    </Dialog>
                  )}
                  {selectedDocType === "notice" && (
                    <Dialog >
                      <DialogTrigger asChild>
                        <Button variant="outline" size="sm" >
                          <Eye className="h-4 w-4" />
                        </Button>
                      </DialogTrigger>

                      <DialogContent className="max-w-2xl max-h-screen overflow-y-auto">

                        <DialogHeader >
                          <DialogTitle>Xem th√¥ng tin Ph√°p lu·∫≠t</DialogTitle>
                        </DialogHeader>
                        <div className="space-y-4">
                          <div>
                            <label>Ti√™u ƒë·ªÅ *</label>
                            <Input placeholder="xem ti√™u ƒë·ªÅ " disabled />
                          </div>

                          <div>
                            <label>M√¥ t·∫£ *</label>
                            <Textarea
                              id="description"
                              placeholder="Xem m√¥ t·∫£ "
                              rows={10}
                              disabled />
                          </div>
                          <div>
                            <label>Lo·∫°i b√†i vi·∫øt</label>
                            <Select disabled>
                              <SelectTrigger>
                                <SelectValue placeholder="Ch·ªçn lo·∫°i b√†i vi·∫øt" />
                              </SelectTrigger>
                              <SelectContent>
                                <SelectItem value="luat-quoc-phong">Lu·∫≠t Qu·ªëc ph√≤ng</SelectItem>
                                <SelectItem value="luat-quan-su">Lu·∫≠t Qu√¢n s·ª±</SelectItem>
                                <SelectItem value="quy-dinh">Quy ƒë·ªãnh</SelectItem>
                              </SelectContent>
                            </Select>
                          </div>
                          <div>
                            <label>Thu·ªôc lƒ©nh v·ª±c</label>
                            <div className="flex items-center gap-2 mt-1">
                              <Input
                                className="w-60"
                                placeholder="Xem"
                                value={inputValue}
                                onChange={(e) => setInputValue(e.target.value)}
                                onKeyDown={(e) => e.key === "Enter" && handleAddField()}
                                disabled />
                              <Button type="button" onClick={handleAddField} disabled>
                                Nh·∫≠p
                              </Button>
                            </div>

                            {/* Hi·ªÉn th·ªã c√°c lƒ©nh v·ª±c ƒë√£ nh·∫≠p */}
                            {fields.length > 0 && (
                              <div className="flex flex-wrap gap-2 mt-3">
                                {fields.map((field, index) => (
                                  <div
                                    key={index}
                                    className="flex items-center bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm"
                                  >
                                    <span>{field}</span>
                                    <button
                                      onClick={() => {
                                        const updated = fields.filter((_, i) => i !== index)
                                        setFields(updated)
                                      }}
                                      className="ml-2 text-red-500 hover:text-red-700"
                                      aria-label={`Xo√° ${field}`}
                                    >
                                      ‚úï
                                    </button>
                                  </div>
                                ))}
                              </div>
                            )}

                          </div>
                          <div>
                            <label>T√™n v√† c·∫•p b·∫≠c</label>
                            <Input placeholder="Xem t√™n v√† c·∫•p b·∫≠c " disabled />
                          </div>




                        </div>
                      </DialogContent>

                    </Dialog>
                  )}
                  {selectedDocType === "plan" && (
                    <Dialog >
                      <DialogTrigger asChild>
                        <Button variant="outline" size="sm" >
                          <Eye className="h-4 w-4" />
                        </Button>
                      </DialogTrigger>

                      <DialogContent className="max-w-2xl max-h-screen overflow-y-auto">

                        <DialogHeader >
                          <DialogTitle>Xem th√¥ng tin KHQS</DialogTitle>
                        </DialogHeader>
                        <div className="space-y-4">
                          <div>
                            <label>Ti√™u ƒë·ªÅ *</label>
                            <Input placeholder="xem ti√™u ƒë·ªÅ " disabled />
                          </div>

                          <div>
                            <label>M√¥ t·∫£ *</label>
                            <Textarea
                              id="description"
                              placeholder="Xem m√¥ t·∫£ "
                              rows={10}
                              disabled />
                          </div>
                          <div>
                            <label>Lo·∫°i b√†i vi·∫øt</label>
                            <Select disabled>
                              <SelectTrigger>
                                <SelectValue placeholder="Ch·ªçn lo·∫°i b√†i vi·∫øt" />
                              </SelectTrigger>
                              <SelectContent>
                                <SelectItem value="cong-nghe-quan-su">C√¥ng ngh·ªá Qu√¢n s·ª±</SelectItem>
                                <SelectItem value="chien-luoc">Chi·∫øn l∆∞·ª£c</SelectItem>
                                <SelectItem value="nghien-cuu">Nghi√™n c·ª©u</SelectItem>
                              </SelectContent>
                            </Select>
                          </div>
                          <div>
                            <label>Thu·ªôc lƒ©nh v·ª±c</label>
                            <div className="flex items-center gap-2 mt-1">
                              <Input
                                className="w-60"
                                placeholder="Xem"
                                value={inputValue}
                                onChange={(e) => setInputValue(e.target.value)}
                                onKeyDown={(e) => e.key === "Enter" && handleAddField()}
                                disabled />
                              <Button type="button" onClick={handleAddField} disabled>
                                Nh·∫≠p
                              </Button>
                            </div>

                            {/* Hi·ªÉn th·ªã c√°c lƒ©nh v·ª±c ƒë√£ nh·∫≠p */}
                            {fields.length > 0 && (
                              <div className="flex flex-wrap gap-2 mt-3">
                                {fields.map((field, index) => (
                                  <div
                                    key={index}
                                    className="flex items-center bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm"
                                  >
                                    <span>{field}</span>
                                    <button
                                      disabled
                                      onClick={() => {
                                        const updated = fields.filter((_, i) => i !== index)
                                        setFields(updated)
                                      }}
                                      className="ml-2 text-red-500 hover:text-red-700"
                                      aria-label={`Xo√° ${field}`}
                                    >
                                      ‚úï
                                    </button>
                                  </div>
                                ))}
                              </div>
                            )}

                          </div>
                          <div>
                            <label>T√™n v√† c·∫•p b·∫≠c</label>
                            <Input placeholder="Xem t√™n v√† c·∫•p b·∫≠c " disabled />
                          </div>




                        </div>
                      </DialogContent>

                    </Dialog>
                  )}



                  <div className="text-right">
                    {selectedDocType === "report" && (
                      <Dialog >
                        <DialogTrigger asChild>
                          <Button variant="outline" size="sm" >
                            <Edit className="h-4 w-4" />
                          </Button>
                        </DialogTrigger>

                        <DialogContent className="max-w-2xl max-h-screen overflow-y-auto">

                          <DialogHeader >
                            <DialogTitle>C·∫≠p nh·∫≠t CCHC & Chuy·ªÉn ƒë·ªïi s·ªë</DialogTitle>
                          </DialogHeader>
                          <div className="space-y-4">
                            <div>
                              <label>Ti√™u ƒë·ªÅ *</label>
                              <Input placeholder="Nh·∫≠p ti√™u ƒë·ªÅ " />
                            </div>

                            <div>
                              <label>M√¥ t·∫£ *</label>
                              <Textarea
                                id="description"
                                placeholder="Nh·∫≠p m√¥ t·∫£ "
                                rows={10}
                              />
                            </div>
                            <div>
                              <label>Lo·∫°i b√†i vi·∫øt</label>
                              <Select>
                                <SelectTrigger>
                                  <SelectValue placeholder="Ch·ªçn lo·∫°i b√†i vi·∫øt" />
                                </SelectTrigger>
                                <SelectContent>
                                  <SelectItem value="chuyen-doi-so">Chuy·ªÉn ƒë·ªïi s·ªë</SelectItem>
                                  <SelectItem value="cai-cach-hanh-chinh">C·∫£i c√°ch h√†nh ch√≠nh</SelectItem>
                                  <SelectItem value="dchinh-phu-dien-tu">Ch√≠nh ph·ªß ƒëi·ªán t·ª≠</SelectItem>
                                </SelectContent>
                              </Select>
                            </div>
                            <div>
                              <label>Thu·ªôc lƒ©nh v·ª±c</label>
                              <div className="flex items-center gap-2 mt-1">
                                <Input
                                  className="w-60"
                                  placeholder="Nh·∫≠p"
                                  value={inputValue}
                                  onChange={(e) => setInputValue(e.target.value)}
                                  onKeyDown={(e) => e.key === "Enter" && handleAddField()}
                                />
                                <Button type="button" onClick={handleAddField}>
                                  Nh·∫≠p
                                </Button>
                              </div>

                              {/* Hi·ªÉn th·ªã c√°c lƒ©nh v·ª±c ƒë√£ nh·∫≠p */}
                              {fields.length > 0 && (
                                <div className="flex flex-wrap gap-2 mt-3">
                                  {fields.map((field, index) => (
                                    <div
                                      key={index}
                                      className="flex items-center bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm"
                                    >
                                      <span>{field}</span>
                                      <button
                                        onClick={() => {
                                          const updated = fields.filter((_, i) => i !== index)
                                          setFields(updated)
                                        }}
                                        className="ml-2 text-red-500 hover:text-red-700"
                                        aria-label={`Xo√° ${field}`}
                                      >
                                        ‚úï
                                      </button>
                                    </div>
                                  ))}
                                </div>
                              )}

                            </div>
                            <div>
                              <label>T√™n v√† c·∫•p b·∫≠c</label>
                              <Input placeholder="Nh·∫≠p t√™n v√† c·∫•p b·∫≠c " />
                            </div>

                            <DialogFooter >
                              <DialogClose asChild>

                                <Button type="button"  >
                                  H·ªßy
                                </Button>
                              </DialogClose>
                              <DialogClose asChild>

                                <Button type="submit" className="bg-blue-600 hover:bg-blue-700">
                                  L∆∞u
                                </Button>
                              </DialogClose>
                            </DialogFooter>


                          </div>
                        </DialogContent>

                      </Dialog>
                    )}
                    {selectedDocType === "directive" && (
                      <Dialog >
                        <DialogTrigger asChild>
                          <Button variant="outline" size="sm" >
                            <Edit className="h-4 w-4" />
                          </Button>
                        </DialogTrigger>

                        <DialogContent className="max-w-2xl max-h-screen overflow-y-auto">

                          <DialogHeader >
                            <DialogTitle>C·∫≠p nh·∫≠t CCHC & Chuy·ªÉn ƒë·ªïi s·ªë</DialogTitle>
                          </DialogHeader>
                          <div className="space-y-4">
                            <div>
                              <label>Ti√™u ƒë·ªÅ *</label>
                              <Input placeholder="Nh·∫≠p ti√™u ƒë·ªÅ " />
                            </div>

                            <div>
                              <label>M√¥ t·∫£ *</label>
                              <Textarea
                                id="description"
                                placeholder="Nh·∫≠p m√¥ t·∫£ "
                                rows={10}
                              />
                            </div>
                            <div>
                              <label>Lo·∫°i b√†i vi·∫øt</label>
                              <Select>
                                <SelectTrigger>
                                  <SelectValue placeholder="Ch·ªçn lo·∫°i b√†i vi·∫øt" />
                                </SelectTrigger>
                                <SelectContent>
                                  <SelectItem value="giao-duc-chinh-tri">Gi√°o d·ª•c ch√≠nh tr·ªã</SelectItem>
                                  <SelectItem value="truyen-thong">Truy·ªÅn Th√¥ng</SelectItem>
                                  <SelectItem value="van-hoa">VƒÉn h√≥a</SelectItem>
                                </SelectContent>
                              </Select>
                            </div>
                            <div>
                              <label>Thu·ªôc lƒ©nh v·ª±c</label>
                              <div className="flex items-center gap-2 mt-1">
                                <Input
                                  className="w-60"
                                  placeholder="Nh·∫≠p"
                                  value={inputValue}
                                  onChange={(e) => setInputValue(e.target.value)}
                                  onKeyDown={(e) => e.key === "Enter" && handleAddField()}
                                />
                                <Button type="button" onClick={handleAddField}>
                                  Nh·∫≠p
                                </Button>
                              </div>

                              {/* Hi·ªÉn th·ªã c√°c lƒ©nh v·ª±c ƒë√£ nh·∫≠p */}
                              {fields.length > 0 && (
                                <div className="flex flex-wrap gap-2 mt-3">
                                  {fields.map((field, index) => (
                                    <div
                                      key={index}
                                      className="flex items-center bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm"
                                    >
                                      <span>{field}</span>
                                      <button
                                        onClick={() => {
                                          const updated = fields.filter((_, i) => i !== index)
                                          setFields(updated)
                                        }}
                                        className="ml-2 text-red-500 hover:text-red-700"
                                        aria-label={`Xo√° ${field}`}
                                      >
                                        ‚úï
                                      </button>
                                    </div>
                                  ))}
                                </div>
                              )}

                            </div>
                            <div>
                              <label>T√™n v√† c·∫•p b·∫≠c</label>
                              <Input placeholder="Nh·∫≠p t√™n v√† c·∫•p b·∫≠c " />
                            </div>

                            <DialogFooter >
                              <DialogClose asChild>

                                <Button type="button"  >
                                  H·ªßy
                                </Button>
                              </DialogClose>
                              <DialogClose asChild>

                                <Button type="submit" className="bg-blue-600 hover:bg-blue-700">
                                  L∆∞u
                                </Button>
                              </DialogClose>
                            </DialogFooter>


                          </div>
                        </DialogContent>

                      </Dialog>
                    )}
                    {selectedDocType === "notice" && (
                      <Dialog >
                        <DialogTrigger asChild>
                          <Button variant="outline" size="sm" >
                            <Edit className="h-4 w-4" />
                          </Button>
                        </DialogTrigger>

                        <DialogContent className="max-w-2xl max-h-screen overflow-y-auto">

                          <DialogHeader >
                            <DialogTitle>C·∫≠p nh·∫≠t CCHC & Chuy·ªÉn ƒë·ªïi s·ªë</DialogTitle>
                          </DialogHeader>
                          <div className="space-y-4">
                            <div>
                              <label>Ti√™u ƒë·ªÅ *</label>
                              <Input placeholder="Nh·∫≠p ti√™u ƒë·ªÅ " />
                            </div>

                            <div>
                              <label>M√¥ t·∫£ *</label>
                              <Textarea
                                id="description"
                                placeholder="Nh·∫≠p m√¥ t·∫£ "
                                rows={10}
                              />
                            </div>
                            <div>
                              <label>Lo·∫°i b√†i vi·∫øt</label>
                              <Select>
                                <SelectTrigger>
                                  <SelectValue placeholder="Ch·ªçn lo·∫°i b√†i vi·∫øt" />
                                </SelectTrigger>
                                <SelectContent>
                                  <SelectItem value="luat-quoc-phong">Lu·∫≠t Qu·ªëc ph√≤ng</SelectItem>
                                  <SelectItem value="luat-quan-su">Lu·∫≠t Qu√¢n s·ª±</SelectItem>
                                  <SelectItem value="quy-dinh">Quy ƒë·ªãnh</SelectItem>
                                </SelectContent>
                              </Select>
                            </div>
                            <div>
                              <label>Thu·ªôc lƒ©nh v·ª±c</label>
                              <div className="flex items-center gap-2 mt-1">
                                <Input
                                  className="w-60"
                                  placeholder="Nh·∫≠p"
                                  value={inputValue}
                                  onChange={(e) => setInputValue(e.target.value)}
                                  onKeyDown={(e) => e.key === "Enter" && handleAddField()}
                                />
                                <Button type="button" onClick={handleAddField}>
                                  Nh·∫≠p
                                </Button>
                              </div>

                              {/* Hi·ªÉn th·ªã c√°c lƒ©nh v·ª±c ƒë√£ nh·∫≠p */}
                              {fields.length > 0 && (
                                <div className="flex flex-wrap gap-2 mt-3">
                                  {fields.map((field, index) => (
                                    <div
                                      key={index}
                                      className="flex items-center bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm"
                                    >
                                      <span>{field}</span>
                                      <button
                                        onClick={() => {
                                          const updated = fields.filter((_, i) => i !== index)
                                          setFields(updated)
                                        }}
                                        className="ml-2 text-red-500 hover:text-red-700"
                                        aria-label={`Xo√° ${field}`}
                                      >
                                        ‚úï
                                      </button>
                                    </div>
                                  ))}
                                </div>
                              )}

                            </div>
                            <div>
                              <label>T√™n v√† c·∫•p b·∫≠c</label>
                              <Input placeholder="Nh·∫≠p t√™n v√† c·∫•p b·∫≠c " />
                            </div>

                            <DialogFooter >
                              <DialogClose asChild>

                                <Button type="button"  >
                                  H·ªßy
                                </Button>
                              </DialogClose>
                              <DialogClose asChild>

                                <Button type="submit" className="bg-blue-600 hover:bg-blue-700">
                                  L∆∞u
                                </Button>
                              </DialogClose>
                            </DialogFooter>


                          </div>
                        </DialogContent>

                      </Dialog>
                    )}
                    {selectedDocType === "plan" && (
                      <Dialog >
                        <DialogTrigger asChild>
                          <Button variant="outline" size="sm" >
                            <Edit className="h-4 w-4" />
                          </Button>
                        </DialogTrigger>

                        <DialogContent className="max-w-2xl max-h-screen overflow-y-auto">

                          <DialogHeader >
                            <DialogTitle>C·∫≠p nh·∫≠t CCHC & Chuy·ªÉn ƒë·ªïi s·ªë</DialogTitle>
                          </DialogHeader>
                          <div className="space-y-4">
                            <div>
                              <label>Ti√™u ƒë·ªÅ *</label>
                              <Input placeholder="Nh·∫≠p ti√™u ƒë·ªÅ " />
                            </div>

                            <div>
                              <label>M√¥ t·∫£ *</label>
                              <Textarea
                                id="description"
                                placeholder="Nh·∫≠p m√¥ t·∫£ "
                                rows={10}
                              />
                            </div>
                            <div>
                              <label>Lo·∫°i b√†i vi·∫øt</label>
                              <Select>
                                <SelectTrigger>
                                  <SelectValue placeholder="Ch·ªçn lo·∫°i b√†i vi·∫øt" />
                                </SelectTrigger>
                                <SelectContent>
                                  <SelectItem value="cong-nghe-quan-su">C√¥ng ngh·ªá Qu√¢n s·ª±</SelectItem>
                                  <SelectItem value="chien-luoc">Chi·∫øn l∆∞·ª£c</SelectItem>
                                  <SelectItem value="nghien-cuu">Nghi√™n c·ª©u</SelectItem>
                                </SelectContent>
                              </Select>
                            </div>
                            <div>
                              <label>Thu·ªôc lƒ©nh v·ª±c</label>
                              <div className="flex items-center gap-2 mt-1">
                                <Input
                                  className="w-60"
                                  placeholder="Nh·∫≠p"
                                  value={inputValue}
                                  onChange={(e) => setInputValue(e.target.value)}
                                  onKeyDown={(e) => e.key === "Enter" && handleAddField()}
                                />
                                <Button type="button" onClick={handleAddField}>
                                  Nh·∫≠p
                                </Button>
                              </div>

                              {/* Hi·ªÉn th·ªã c√°c lƒ©nh v·ª±c ƒë√£ nh·∫≠p */}
                              {fields.length > 0 && (
                                <div className="flex flex-wrap gap-2 mt-3">
                                  {fields.map((field, index) => (
                                    <div
                                      key={index}
                                      className="flex items-center bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm"
                                    >
                                      <span>{field}</span>
                                      <button
                                        onClick={() => {
                                          const updated = fields.filter((_, i) => i !== index)
                                          setFields(updated)
                                        }}
                                        className="ml-2 text-red-500 hover:text-red-700"
                                        aria-label={`Xo√° ${field}`}
                                      >
                                        ‚úï
                                      </button>
                                    </div>
                                  ))}
                                </div>
                              )}

                            </div>
                            <div>
                              <label>T√™n v√† c·∫•p b·∫≠c</label>
                              <Input placeholder="Nh·∫≠p t√™n v√† c·∫•p b·∫≠c " />
                            </div>

                            <DialogFooter >
                              <DialogClose asChild>

                                <Button type="button"  >
                                  H·ªßy
                                </Button>
                              </DialogClose>
                              <DialogClose asChild>

                                <Button type="submit" className="bg-blue-600 hover:bg-blue-700">
                                  L∆∞u
                                </Button>
                              </DialogClose>
                            </DialogFooter>


                          </div>
                        </DialogContent>

                      </Dialog>
                    )}


                  </div>
                  <Button
                    variant="outline"
                    size="sm"
                    className="text-red-600 hover:text-red-700"
                    onClick={handleDelete}
                  >
                    <Trash2 className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
