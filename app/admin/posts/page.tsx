"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Plus, Search, Edit, Trash2, Eye, Calendar, User, Filter } from "lucide-react"
import { Dialog, DialogTrigger, DialogContent, DialogHeader, DialogTitle, DialogFooter, } from "@/components/ui/dialog";
import { Label } from "recharts"
import { DialogClose } from "@/components/ui/dialog";


export default function AdminPostsPage() {
  const [searchTerm, setSearchTerm] = useState("")
  const [selectedCategory, setSelectedCategory] = useState("all")
  const [selectedStatus, setSelectedStatus] = useState("all")

  const categories = [
    { id: "all", name: "T·∫•t c·∫£ danh m·ª•c" },
    { id: "news", name: "Tin t·ª©c" },
    { id: "activities", name: "Ho·∫°t ƒë·ªông" },
    { id: "training", name: "Hu·∫•n luy·ªán" },
    { id: "announcements", name: "Th√¥ng b√°o" },
  ]

  const statuses = [
    { id: "all", name: "T·∫•t c·∫£ tr·∫°ng th√°i" },
    { id: "published", name: "ƒê√£ xu·∫•t b·∫£n" },
    { id: "draft", name: "B·∫£n nh√°p" },
    { id: "pending", name: "Ch·ªù duy·ªát" },
  ]

  const posts = [
    {
      id: 1,
      title: "H·ªôi ngh·ªã t·ªïng k·∫øt c√¥ng t√°c nƒÉm 2024",
      category: "activities",
      categoryName: "Ho·∫°t ƒë·ªông",
      status: "published",
      statusName: "ƒê√£ xu·∫•t b·∫£n",
      author: "Admin",
      date: "15/12/2024",
      views: 1250,
      featured: true,
    },
    {
      id: 2,
      title: "Di·ªÖn t·∫≠p ph√≤ng th·ªß khu v·ª±c 2024",
      category: "training",
      categoryName: "Hu·∫•n luy·ªán",
      status: "published",
      statusName: "ƒê√£ xu·∫•t b·∫£n",
      author: "Ph√≤ng Tham m∆∞u",
      date: "12/12/2024",
      views: 980,
      featured: true,
    },
    {
      id: 3,
      title: "Th√¥ng b√°o v·ªÅ l·ªãch ngh·ªâ T·∫øt Nguy√™n ƒë√°n 2025",
      category: "announcements",
      categoryName: "Th√¥ng b√°o",
      status: "draft",
      statusName: "B·∫£n nh√°p",
      author: "Admin",
      date: "10/12/2024",
      views: 0,
      featured: false,
    },
    {
      id: 4,
      title: "Tin t·ª©c qu·ªëc t·∫ø v·ªÅ t√¨nh h√¨nh an ninh",
      category: "news",
      categoryName: "Tin t·ª©c",
      status: "pending",
      statusName: "Ch·ªù duy·ªát",
      author: "Ph√≤ng Ch√≠nh tr·ªã",
      date: "08/12/2024",
      views: 0,
      featured: false,
    },
  ]

  const filteredPosts = posts.filter((post) => {
    const matchesSearch = post.title.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesCategory = selectedCategory === "all" || post.category === selectedCategory
    const matchesStatus = selectedStatus === "all" || post.status === selectedStatus
    return matchesSearch && matchesCategory && matchesStatus
  })

  const stats = [
    { label: "T·ªïng b·∫£ng tin", value: "156", color: "text-blue-600" },
    { label: "ƒê√£ xu·∫•t b·∫£n", value: "142", color: "text-green-600" },
    { label: "B·∫£n nh√°p", value: "8", color: "text-yellow-600" },
    { label: "Ch·ªù duy·ªát", value: "6", color: "text-red-600" },
  ]
  const handleDelete = () => {
    const confirmDelete = window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën xo√°?");

    if (confirmDelete) {
      // üëâ Logic xo√° ·ªü ƒë√¢y ‚Äî v√≠ d·ª• API, x√≥a item, v.v.
      console.log("ƒê√£ xo√° b·∫£ng tin");

      // üëâ Th√¥ng b√°o
      if (Notification.permission === "granted") {
        new Notification("ƒê√£ xo√° b·∫£ng tin", {
          body: "b·∫£ng tin ƒë√£ ƒë∆∞·ª£c xo√° th√†nh c√¥ng.",
        });
      } else if (Notification.permission !== "denied") {
        // Y√™u c·∫ßu quy·ªÅn n·∫øu ch∆∞a ƒë∆∞·ª£c c·∫•p
        Notification.requestPermission().then((permission) => {
          if (permission === "granted") {
            new Notification("ƒê√£ xo√° b·∫£ng tin", {
              body: "b·∫£ng tin ƒë√£ ƒë∆∞·ª£c xo√° th√†nh c√¥ng.",
            });
          } else {
            alert("ƒê√£ xo√° b·∫£ng tin.");
          }
        });
      } else {
        alert("ƒê√£ xo√° b·∫£ng tin.");
      }
    }
  };

  const [imagePreview, setImagePreview] = useState<string | null>(null);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);


  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      const imageUrl = URL.createObjectURL(file);
      setImagePreview(imageUrl);
    }
  };

  const [open, setOpen] = useState(false);

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-3xl font-bold text-gray-800">Qu·∫£n l√Ω b·∫£ng tin</h1>
        <Dialog >
          <DialogTrigger asChild>
            <Button className="bg-red-600 hover:bg-red-700">
              <Plus className="h-4 w-4 mr-2" />
              Th√™m b·∫£ng tin m·ªõi
            </Button>
          </DialogTrigger>
          <DialogContent className="max-w-2xl max-h-screen overflow-y-auto">
            <DialogHeader >
              <DialogTitle>Th√™m b·∫£ng tin m·ªõi</DialogTitle>
            </DialogHeader>
            <div className=" space-y-4 mt-4 ">
              <form className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700">Ti√™u ƒë·ªÅ(*)</label>
                  <Input placeholder="Nh·∫≠p ti√™u ƒë·ªÅ b·∫£ng tin" />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">T√≥m T·∫Øt (*)</label>
                  <Input placeholder="Nh·∫≠p t√≥m t·∫Øt b·∫£ng tin" />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">N·ªôi dung</label>
                  <textarea
                    className="mt-1 w-full border rounded-md p-2"
                    rows={10}
                    placeholder="Nh·∫≠p n·ªôi dung b·∫£ng tin"
                  />
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label htmlFor="">Danh m·ª•c</label>
                    <Select>
                      <SelectTrigger>
                        <SelectValue placeholder="Ch·ªçn danh m·ª•c" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="tin-trong-nuoc">Tin trong n∆∞·ªõc </SelectItem>
                        <SelectItem value="tin-quoc-te">Qu·ªëc t·∫ø</SelectItem>
                        <SelectItem value="tin-tuc-quan-su">Tin t·ª©c qu√¢n s·ª±</SelectItem>
                        <SelectItem value="tin-hoat-dong-su-doan">Tin ho·∫°t ƒë·ªông c·ªßa s∆∞ ƒëo√†n</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <label htmlFor="">H√¨nh ·∫£nh</label>

                    <div className="space-y-2">
                      <Input
                        id="imageFile"
                        type="file"
                        accept="image/*"
                        onChange={handleFileChange}
                        className="cursor-pointer"
                      />
                      {imagePreview && (
                        <img
                          src={imagePreview}
                          alt="Preview"
                          className="mt-2 w-32 h-32 object-cover rounded border"
                        />
                      )}
                    </div>
                  </div>
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label htmlFor="">Ho·∫°t ƒë·ªông qu√¢n s·ª±</label>

                    <Select>
                      <SelectTrigger>
                        <SelectValue placeholder="Ch·ªçn ho·∫°t ƒë·ªông" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="vu-khi-trang-bi">V≈© kh√≠ trang b·ªã</SelectItem>
                        <SelectItem value="chien-thuat">Chi·∫øn Thu·∫≠t</SelectItem>
                        <SelectItem value="cong-nghe-quan-su">C√¥ng ngh·ªá qu√¢n s·ª±</SelectItem>
                        <SelectItem value="quoc-phong">Qu·ªëc Ph√≤ng</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <label htmlFor="">Ho·∫°t ƒë·ªông s∆∞ ƒëo√†n</label>

                    <Select>
                      <SelectTrigger>
                        <SelectValue placeholder="Ch·ªçn ho·∫°t ƒë·ªông" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="huan-luyen">Hu·∫•n luy·ªán</SelectItem>
                        <SelectItem value="thi-dua">Thi ƒëua</SelectItem>
                        <SelectItem value="hoi-nghi">H·ªôi Ngh·ªã</SelectItem>
                        <SelectItem value="sinh-hoat">Sinh Ho·∫°t</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>


                </div>

                <div className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    id="featured"
                    className="rounded"
                  />
                  <label htmlFor="featured" className="text-sm text-gray-700">
                    G·∫Øn b·∫£ng tin n·ªïi b·∫≠t
                  </label>
                </div>
              </form>
            </div>
            <DialogFooter className="flex-shrink-0 mt-4">
              <DialogClose asChild>
                <Button type="button" className="mr-2">
                  H·ªßy
                </Button>
              </DialogClose>
              <DialogClose asChild>

                <Button type="submit" className="bg-blue-600 hover:bg-blue-700">
                  L∆∞u b·∫£ng tin
                </Button>
              </DialogClose>
            </DialogFooter>
          </DialogContent>
        </Dialog>

      </div>

      {/* Statistics */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        {stats.map((stat, index) => (
          <Card key={index}>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">{stat.label}</p>
                  <p className={`text-3xl font-bold ${stat.color}`}>{stat.value}</p>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Filters */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center">
            <Filter className="h-5 w-5 mr-2" />
            B·ªô l·ªçc v√† t√¨m ki·∫øm
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
              <Input
                placeholder="T√¨m ki·∫øm b·∫£ng tin..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full"
              />
            </div>
            <div>
              <Select value={selectedCategory} onValueChange={setSelectedCategory}>
                <SelectTrigger>
                  <SelectValue placeholder="Ch·ªçn danh m·ª•c" />
                </SelectTrigger>
                <SelectContent>
                  {categories.map((category) => (
                    <SelectItem key={category.id} value={category.id}>
                      {category.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div>
              <Select value={selectedStatus} onValueChange={setSelectedStatus}>
                <SelectTrigger>
                  <SelectValue placeholder="Ch·ªçn tr·∫°ng th√°i" />
                </SelectTrigger>
                <SelectContent>
                  {statuses.map((status) => (
                    <SelectItem key={status.id} value={status.id}>
                      {status.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div>
              <Button variant="outline" className="w-full">
                <Search className="h-4 w-4 mr-2" />
                T√¨m ki·∫øm
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Posts Table */}
      <Card>
        <CardHeader>
          <CardTitle>Danh s√°ch b·∫£ng tin ({filteredPosts.length})</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {filteredPosts.map((post) => (
              <div key={post.id} className="flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50">
                <div className="flex-1">
                  <div className="flex items-center space-x-2 mb-2">
                    <h3 className="font-semibold text-gray-800">{post.title}</h3>
                    {post.featured && <Badge variant="destructive">N·ªïi b·∫≠t</Badge>}
                  </div>
                  <div className="flex items-center space-x-4 text-sm text-gray-500">
                    <Badge variant="outline">{post.categoryName}</Badge>
                    <Badge
                      variant={
                        post.status === "published" ? "default" : post.status === "draft" ? "secondary" : "destructive"
                      }
                    >
                      {post.statusName}
                    </Badge>
                    <div className="flex items-center">
                      <User className="h-4 w-4 mr-1" />
                      {post.author}
                    </div>
                    <div className="flex items-center">
                      <Calendar className="h-4 w-4 mr-1" />
                      {post.date}
                    </div>
                    <div className="flex items-center">
                      <Eye className="h-4 w-4 mr-1" />
                      {post.views}
                    </div>
                  </div>
                </div>
                <div className="flex items-center space-x-2">
                  {/* <Dialog o> */}

                  <Dialog >
                    <DialogTrigger asChild>
                      <Button variant="outline" size="sm">
                        <Eye className="h-4 w-4" />
                      </Button>
                    </DialogTrigger>

                    <DialogContent className="max-w-2xl max-h-screen overflow-y-auto">
                      <DialogHeader>
                        <DialogTitle>Xem b·∫£ng tin</DialogTitle>
                      </DialogHeader>

                      <div className="space-y-4 mt-4">
                        <form className="space-y-4">
                          <div>
                            <label className="block text-sm font-medium text-gray-700">Ti√™u ƒë·ªÅ(*)</label>
                            <Input placeholder="Nh·∫≠p ti√™u ƒë·ªÅ b·∫£ng tin" disabled />
                          </div>

                          <div>
                            <label className="block text-sm font-medium text-gray-700">T√≥m T·∫Øt (*)</label>
                            <Input placeholder="Nh·∫≠p t√≥m t·∫Øt b·∫£ng tin" disabled />
                          </div>

                          <div>
                            <label className="block text-sm font-medium text-gray-700">N·ªôi dung</label>
                            <textarea
                              className="mt-1 w-full border rounded-md p-2"
                              rows={10}
                              placeholder="Nh·∫≠p n·ªôi dung b·∫£ng tin"
                              disabled />
                          </div>

                          <div className="grid grid-cols-2 gap-4">
                            <div>
                              <label>Danh m·ª•c</label>
                              <Select disabled>
                                <SelectTrigger>
                                  <SelectValue placeholder="Ch·ªçn danh m·ª•c" />
                                </SelectTrigger>
                                <SelectContent>
                                  <SelectItem value="tin-trong-nuoc">Tin trong n∆∞·ªõc</SelectItem>
                                  <SelectItem value="tin-quoc-te">Qu·ªëc t·∫ø</SelectItem>
                                  <SelectItem value="tin-tuc-quan-su">Tin t·ª©c qu√¢n s·ª±</SelectItem>
                                  <SelectItem value="tin-hoat-dong-su-doan">Tin ho·∫°t ƒë·ªông c·ªßa s∆∞ ƒëo√†n</SelectItem>
                                </SelectContent>
                              </Select>
                            </div>

                            <div>
                              <label>H√¨nh ·∫£nh</label>
                              <div className="space-y-2">
                                <Input
                                  id="imageFile"
                                  type="file"
                                  onChange={handleFileChange}
                                  accept="image/*"
                                  className="cursor-pointer"
                                  disabled />
                                {imagePreview && (
                                  <img
                                    src={imagePreview}
                                    alt="Preview"
                                    className="mt-2 w-32 h-32 object-cover rounded border"
                                  />
                                )}
                              </div>
                            </div>
                          </div>

                          <div className="grid grid-cols-2 gap-4">
                            <div>
                              <label>Ho·∫°t ƒë·ªông qu√¢n s·ª±</label>
                              <Select disabled>
                                <SelectTrigger>
                                  <SelectValue placeholder="Ch·ªçn ho·∫°t ƒë·ªông" />
                                </SelectTrigger>
                                <SelectContent>
                                  <SelectItem value="vu-khi-trang-bi">V≈© kh√≠ trang b·ªã</SelectItem>
                                  <SelectItem value="chien-thuat">Chi·∫øn Thu·∫≠t</SelectItem>
                                  <SelectItem value="cong-nghe-quan-su">C√¥ng ngh·ªá qu√¢n s·ª±</SelectItem>
                                  <SelectItem value="quoc-phong">Qu·ªëc Ph√≤ng</SelectItem>
                                </SelectContent>
                              </Select>
                            </div>

                            <div>
                              <label>Ho·∫°t ƒë·ªông s∆∞ ƒëo√†n</label>
                              <Select disabled>
                                <SelectTrigger>
                                  <SelectValue placeholder="Ch·ªçn ho·∫°t ƒë·ªông" />
                                </SelectTrigger>
                                <SelectContent>
                                  <SelectItem value="huan-luyen">Hu·∫•n luy·ªán</SelectItem>
                                  <SelectItem value="thi-dua">Thi ƒëua</SelectItem>
                                  <SelectItem value="hoi-nghi">H·ªôi Ngh·ªã</SelectItem>
                                  <SelectItem value="sinh-hoat">Sinh Ho·∫°t</SelectItem>
                                </SelectContent>
                              </Select>
                            </div>
                          </div>

                          <div className="flex items-center space-x-2">
                            <input type="checkbox" id="featured" className="rounded" disabled />
                            <label htmlFor="featured" className="text-sm text-gray-700">
                              G·∫Øn b·∫£ng tin n·ªïi b·∫≠t
                            </label>
                          </div>

                          <DialogFooter>
                            <DialogClose asChild>

                              <Button type="button" >
                                H·ªßy
                              </Button>
                            </DialogClose>

                          </DialogFooter>
                        </form>
                      </div>
                    </DialogContent>
                  </Dialog>


                  <Dialog >
                    <DialogTrigger asChild>
                      <Button variant="outline" size="sm">
                        <Edit className="h-4 w-4" />
                      </Button>
                    </DialogTrigger>

                    <DialogContent className="max-w-2xl max-h-screen overflow-y-auto">
                      <DialogHeader>
                        <DialogTitle>C·∫≠p nh·∫≠t b·∫£ng tin</DialogTitle>
                      </DialogHeader>

                      <div className="space-y-4 mt-4">
                        <form className="space-y-4">
                          <div>
                            <label className="block text-sm font-medium text-gray-700">Ti√™u ƒë·ªÅ(*)</label>
                            <Input placeholder="Nh·∫≠p ti√™u ƒë·ªÅ b·∫£ng tin" />
                          </div>

                          <div>
                            <label className="block text-sm font-medium text-gray-700">T√≥m T·∫Øt (*)</label>
                            <Input placeholder="Nh·∫≠p t√≥m t·∫Øt b·∫£ng tin" />
                          </div>

                          <div>
                            <label className="block text-sm font-medium text-gray-700">N·ªôi dung</label>
                            <textarea
                              className="mt-1 w-full border rounded-md p-2"
                              rows={10}
                              placeholder="Nh·∫≠p n·ªôi dung b·∫£ng tin"
                            />
                          </div>

                          <div className="grid grid-cols-2 gap-4">
                            <div>
                              <label>Danh m·ª•c</label>
                              <Select>
                                <SelectTrigger>
                                  <SelectValue placeholder="Ch·ªçn danh m·ª•c" />
                                </SelectTrigger>
                                <SelectContent>
                                  <SelectItem value="tin-trong-nuoc">Tin trong n∆∞·ªõc</SelectItem>
                                  <SelectItem value="tin-quoc-te">Qu·ªëc t·∫ø</SelectItem>
                                  <SelectItem value="tin-tuc-quan-su">Tin t·ª©c qu√¢n s·ª±</SelectItem>
                                  <SelectItem value="tin-hoat-dong-su-doan">Tin ho·∫°t ƒë·ªông c·ªßa s∆∞ ƒëo√†n</SelectItem>
                                </SelectContent>
                              </Select>
                            </div>

                            <div>
                              <label>H√¨nh ·∫£nh</label>
                              <div className="space-y-2">
                                <Input
                                  id="imageFile"
                                  type="file"
                                  onChange={handleFileChange}
                                  accept="image/*"
                                  className="cursor-pointer"
                                />
                                {imagePreview && (
                                  <img
                                    src={imagePreview}
                                    alt="Preview"
                                    className="mt-2 w-32 h-32 object-cover rounded border"
                                  />
                                )}
                              </div>
                            </div>
                          </div>

                          <div className="grid grid-cols-2 gap-4">
                            <div>
                              <label>Ho·∫°t ƒë·ªông qu√¢n s·ª±</label>
                              <Select>
                                <SelectTrigger>
                                  <SelectValue placeholder="Ch·ªçn ho·∫°t ƒë·ªông" />
                                </SelectTrigger>
                                <SelectContent>
                                  <SelectItem value="vu-khi-trang-bi">V≈© kh√≠ trang b·ªã</SelectItem>
                                  <SelectItem value="chien-thuat">Chi·∫øn Thu·∫≠t</SelectItem>
                                  <SelectItem value="cong-nghe-quan-su">C√¥ng ngh·ªá qu√¢n s·ª±</SelectItem>
                                  <SelectItem value="quoc-phong">Qu·ªëc Ph√≤ng</SelectItem>
                                </SelectContent>
                              </Select>
                            </div>

                            <div>
                              <label>Ho·∫°t ƒë·ªông s∆∞ ƒëo√†n</label>
                              <Select>
                                <SelectTrigger>
                                  <SelectValue placeholder="Ch·ªçn ho·∫°t ƒë·ªông" />
                                </SelectTrigger>
                                <SelectContent>
                                  <SelectItem value="huan-luyen">Hu·∫•n luy·ªán</SelectItem>
                                  <SelectItem value="thi-dua">Thi ƒëua</SelectItem>
                                  <SelectItem value="hoi-nghi">H·ªôi Ngh·ªã</SelectItem>
                                  <SelectItem value="sinh-hoat">Sinh Ho·∫°t</SelectItem>
                                </SelectContent>
                              </Select>
                            </div>
                          </div>

                          <div className="flex items-center space-x-2">
                            <input type="checkbox" id="featured" className="rounded" />
                            <label htmlFor="featured" className="text-sm text-gray-700">
                              G·∫Øn b·∫£ng tin n·ªïi b·∫≠t
                            </label>
                          </div>

                          <DialogFooter>
                            <DialogClose asChild>

                              <Button type="submit">H·ªßy</Button>
                            </DialogClose>
                            <DialogClose asChild>

                              <Button
                                type="submit"

                                className="bg-blue-600 hover:bg-blue-700"
                              >
                                L∆∞u
                              </Button>
                            </DialogClose>
                          </DialogFooter>
                        </form>
                      </div>
                    </DialogContent>
                  </Dialog>

                  <Button
                    variant="outline"
                    size="sm"
                    className="text-red-600 hover:text-red-700"
                    onClick={handleDelete}
                  >
                    <Trash2 className="h-4 w-4" />
                  </Button>

                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div >
  )
}
